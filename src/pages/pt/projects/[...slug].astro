---
import BackToPrev from "@components/BackToPrev.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import Link from "@components/Link.astro";
import { getLangFromFilePath, getLangFromUrl } from "@i18n/utils";
import PageLayout from "@layouts/PageLayout.astro";
import { readingTime } from "@lib/utils";
import { type CollectionEntry, getCollection } from "astro:content";

export async function getStaticPaths() {
  const currentFilePath = import.meta.url;

  const fileLang = getLangFromFilePath(currentFilePath);

  const pages = await getCollection("projects");

  const paths = pages
    .filter((page: { id: string }) => page.id.startsWith(`${fileLang}/`))
    .map((page: { id: string }) => {
      const pathParts = page.id.split("/");
      const lang = pathParts[0];
      const slug = pathParts[1];

      return {
        params: { lang, slug },
        props: page,
      };
    });

  return paths;
}

const url = Astro.url;
const lang = getLangFromUrl(url); // Detecta o idioma da URL

type Props = CollectionEntry<"projects">;

const project = Astro.props;
const { Content } = await project.render();
---

<PageLayout title={project.data.title} description={project.data.description}>
  <Container pagefindBody={true}>
    <div class="animate">
      <BackToPrev href=`/${lang}/projects`> Back to projects </BackToPrev>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={project.data.date} lang={lang} />
        </div>
        &bull;
        <div class="font-base text-sm">
          {readingTime(project.body, lang)}
        </div>
      </div>
      <div
        data-pagefind-meta="title"
        class="animate font-serif text-2xl font-semibold text-black dark:text-white"
      >
        {project.data.title}
      </div>
      {
        (project.data.demoURL || project.data.repoURL) && (
          <nav class="animate flex gap-1">
            {project.data.demoURL && (
              <Link href={project.data.demoURL} external>
                demo
              </Link>
            )}
            {project.data.demoURL && project.data.repoURL && <span>/</span>}
            {project.data.repoURL && (
              <Link href={project.data.repoURL} external>
                repo
              </Link>
            )}
          </nav>
        )
      }
    </div>
    <article class="animate">
      <Content />
    </article>
  </Container>
</PageLayout>
