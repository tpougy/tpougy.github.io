---
const { parentId, onSuccess } = Astro.props;
let content = "";
let nickname = "";
let email = "";
let loading = false;

async function addComment() {
  if (!content) {
    alert(t("content_is_required"));
    return;
  }

  if (!nickname) {
    alert(t("nickname_is_required"));
    return;
  }

  try {
    loading = true;
    const res = await fetch("/api/open/comments", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        appId,
        pageId,
        content,
        nickname,
        email,
        parentId,
        pageUrl,
        pageTitle,
      }),
    });
    await res.json();
    refresh();
    teardown();
    setMessage(t("comment_has_been_sent"));
  } finally {
    loading = false;
  }
}

function teardown() {
  content = "";
  nickname = "";
  email = "";
  onSuccess && onSuccess();
}
---

<div class="grid grid-cols-1 gap-4">
  <div class="grid grid-cols-2 gap-4">
    <div class="px-1">
      <label class="mb-2 block text-black dark:text-white" for="nickname"
        >{t("nickname")}</label
      >
      <input
        name="nickname"
        class="w-full rounded border border-black/15 bg-gray-100 p-2 px-4 text-sm font-bold transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black dark:border-white/20 dark:bg-transparent dark:hover:bg-white/5 dark:hover:text-white"
        type="text"
        title={t("nickname")}
        value={nickname}
        onInput={(e) => (nickname = e.target.value)}
      />
    </div>
    <div class="px-1">
      <label class="mb-2 block text-black dark:text-white" for="email"
        >{t("email")}</label
      >
      <input
        name="email"
        class="w-full rounded border border-black/15 bg-gray-100 p-2 px-4 text-sm font-bold transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black dark:border-white/20 dark:bg-transparent dark:hover:bg-white/5 dark:hover:text-white"
        type="email"
        title={t("email")}
        value={email}
        onInput={(e) => (email = e.target.value)}
      />
    </div>
  </div>

  <div class="px-1">
    <label class="mb-2 block text-black dark:text-white" for="reply_content"
      >{t("reply_placeholder")}</label
    >
    <textarea
      name="reply_content"
      class="w-full rounded border border-black/15 bg-gray-100 p-2 px-4 text-sm font-bold transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black dark:border-white/20 dark:bg-transparent dark:hover:bg-white/5 dark:hover:text-white"
      title={t("reply_placeholder")}
      value={content}
      onInput={(e) => (content = e.target.value)}></textarea>
  </div>

  <div class="px-1">
    <button
      class="group relative flex w-fit flex-nowrap rounded border border-black/15 py-1.5 pl-8 pr-3 transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black dark:border-white/20 dark:hover:bg-white/5 dark:hover:text-white"
      disabled={loading}
      onClick={addComment}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="absolute left-2 top-1/2 h-4 w-4 -translate-y-1/2 fill-none stroke-current stroke-2"
      >
        <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
        ></path>
        <polyline
          points="7 11 10 14 17 8"
          class="transition-[stroke-dashoffset] duration-300 ease-in-out [stroke-dasharray:40] [stroke-dashoffset:40] group-hover:[stroke-dashoffset:0]"
        ></polyline>
      </svg>
      <div class="font-serif text-sm font-bold">
        {loading ? t("sending") : t("post_comment")}
      </div>
    </button>
  </div>
</div>
